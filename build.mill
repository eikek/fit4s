//| mill-version: 1.0.3
//| mvnDeps:
//| - io.github.hoangmaihuy::mill-universal-packager::0.2.0
//| - com.lihaoyi::mill-contrib-buildinfo:$MILL_VERSION
//| - com.lihaoyi::mill-contrib-jmh:$MILL_VERSION
//| - com.goyeau::mill-scalafix::0.6.0
//| - org.apache.poi:poi-ooxml:5.4.1
//| - org.eclipse.jgit:org.eclipse.jgit:7.1.0.202411261347-r
package build

import build.project.{CiModule, Fit4sModule, Fit4sPublishModule, MdocModule, Deps, Version, Generator}
import io.github.hoangmaihuy.mill.packager.archetypes.JavaAppPackagingModule
import mill.contrib.buildinfo.BuildInfo
import mill._, scalalib._
import contrib.jmh.JmhModule
import mill.api.{BuildCtx, Result}

object `package` extends Module with CiModule { outer =>
  def appVersion = Task.Input {
    val forcedVersion = Task.env.get("FIT4S_DEV_VERSION")
    forcedVersion.map(Result.Success.apply).getOrElse(Version.get)
  }

  def writeVersion() = Task.Command {
    val file = Task.dest / "version.txt"
    os.write(file, appVersion())
    Task.log.info(s"Version written to: $file")
  }

  def makeReadme() = Task.Command {
    val readme = docs.mdoc()()
    val src = readme.path / "readme.md"
    val trg = moduleDir / "README.md"
    Task.log.info(s"Copy $src -> $trg")
    os.copy(src, trg, replaceExisting = true)
  }

  def headCommit = Task.Input(Version.headCommit)

  object codec extends Fit4sModule with Fit4sPublishModule with BuildInfo {
    def mvnDeps = super.mvnDeps() ++ Deps.scodec
    def publishVersion = outer.appVersion()
    def publishDescription = "Base datastructures and binary codecs"
    def buildInfoPackageName = "fit4s.buildinfo"
    def buildInfoMembers = Seq(
      BuildInfo.Value("version", outer.appVersion()),
      BuildInfo.Value("scalaVersion", scalaVersion()),
      BuildInfo.Value("headCommit", headCommit())
    )
  }

  object profile extends Fit4sModule with Fit4sPublishModule {
    def publishVersion = outer.appVersion()
    def generatedSources: T[Seq[PathRef]] = Task(persistent = true) {
      val input =
        BuildCtx.workspaceRoot / "project" / "profile" / "profile_21.171.00.xlsx"
      val files =
        Generator
          .generateProfileSources2(input, "fit4s.profile", Task.dest, Task.log)
          .map(PathRef(_))
      files ++ super.generatedSources()
    }
  }

  object core extends Fit4sModule with Fit4sPublishModule {
    def publishVersion = outer.appVersion()
    def moduleDeps = Seq(codec, profile)

    def extraTestModuleDeps = Seq(codec.test)
  }

  object bench extends Fit4sModule with JmhModule {
    def moduleDeps = Seq(core, core.test)
    def jmhCoreVersion = "1.37"
  }

  object borer extends Fit4sModule with Fit4sPublishModule {
    def moduleDeps = Seq(core)
    def publishVersion = outer.appVersion()
    def mvnDeps = super.mvnDeps() ++ Deps.borer
  }

  object cli extends Fit4sModule with JavaAppPackagingModule with Fit4sPublishModule {
    def packageVersion = outer.appVersion()
    def publishVersion = outer.appVersion()
    def packageName = s"fit4s-${packageVersion()}"
    def executableScriptName = "fit4s"
    def moduleDeps = Seq(core, borer)
    def mvnDeps = super.mvnDeps() ++
      Deps.fs2 ++
      Deps.decline ++
      Deps.borer ++
      Deps.scribe ++
      Deps.scalatags
  }

  object docs extends MdocModule {
    def mdocSources = Task.Sources(super.moduleDir / "readme.md")
    def moduleDeps = Seq(core, codec, profile, codec.test, cli)
  }
}
